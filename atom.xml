<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[进击的王胖子]]></title>
  <link href="http://wangweiqing.github.io/atom.xml" rel="self"/>
  <link href="http://wangweiqing.github.io/"/>
  <updated>2016-06-20T22:42:43+08:00</updated>
  <id>http://wangweiqing.github.io/</id>
  <author>
    <name><![CDATA[王胖子]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hystrix-工作原理]]></title>
    <link href="http://wangweiqing.github.io/blog/2016/06/20/hystrix-gong-zuo-yuan-li/"/>
    <updated>2016-06-20T22:12:40+08:00</updated>
    <id>http://wangweiqing.github.io/blog/2016/06/20/hystrix-gong-zuo-yuan-li</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>参考文档 <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a><br/>
开发团队封装了RxJava框架，对接口的调用进行隔离，监控等。<br/>
应用了设计模式中的<a href="http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html">观察者模式</a>和<a href="http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html">命令模式</a>。</p>

<h2>工作流程</h2>

<p><img src="https://raw.githubusercontent.com/wiki/Netflix/Hystrix/images/hystrix-command-flow-chart.png" alt="" /></p>

<ol>
<li>构建一个HystrixCommand或者一个HystrixObservableCommand的对象用于执行一个外部依赖的调用。</li>
<li>执行command，不论是HystrixCommand还是HyStrixObservableCommand对象，都会调用AbstractCommand的toObservable()去执行后续的操作。</li>
<li>判断是否有调用缓存。如果有缓存，调用缓存返回结果。</li>
<li>判断调用链路是否通畅。</li>
<li>判断用于执行以来服务调用的Thread Pool/Queue/Semaphore满了。</li>
<li>调用HystrixObservableCommand重写的construct()方法或者HystrixCommand重写的run()方法。</li>
<li>汇总调用链路的调用成功失败率。</li>
<li>获得降级方案。</li>
<li>返回一个调用成功的调用。</li>
</ol>


<h2>关键代码</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="nf">toObservable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/* this is a stateful object so can only be used once */</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">commandState</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">CommandState</span><span class="o">.</span><span class="na">NOT_STARTED</span><span class="o">,</span> <span class="n">CommandState</span><span class="o">.</span><span class="na">OBSERVABLE_CHAIN_CREATED</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;This instance can only be executed once. Please instantiate a new instance.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">commandStartTimestamp</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">properties</span><span class="o">.</span><span class="na">requestLogEnabled</span><span class="o">().</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// log this command execution regardless of what happened</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">currentRequestLog</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentRequestLog</span><span class="o">.</span><span class="na">addExecutedCommand</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">requestCacheEnabled</span> <span class="o">=</span> <span class="n">isRequestCachingEnabled</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">cacheKey</span> <span class="o">=</span> <span class="n">getCacheKey</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">AbstractCommand</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">_cmd</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="cm">/* try from cache first */</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">requestCacheEnabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HystrixCommandResponseFromCache</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">fromCache</span> <span class="o">=</span> <span class="o">(</span><span class="n">HystrixCommandResponseFromCache</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;)</span> <span class="n">requestCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">cacheKey</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">fromCache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">isResponseFromCache</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">handleRequestCacheHitAndEmitValues</span><span class="o">(</span><span class="n">fromCache</span><span class="o">,</span> <span class="n">_cmd</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//doOnCompleted handler already did all of the SUCCESS work</span>
</span><span class='line'>    <span class="c1">//doOnError handler already did all of the FAILURE/TIMEOUT/REJECTION/BAD_REQUEST work</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Action0</span> <span class="n">terminateCommandCleanup</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Action0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">_cmd</span><span class="o">.</span><span class="na">commandState</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">CommandState</span><span class="o">.</span><span class="na">OBSERVABLE_CHAIN_CREATED</span><span class="o">,</span> <span class="n">CommandState</span><span class="o">.</span><span class="na">TERMINAL</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">handleCommandEnd</span><span class="o">(</span><span class="n">_cmd</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span> <span class="c1">//user code never ran</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">_cmd</span><span class="o">.</span><span class="na">commandState</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">CommandState</span><span class="o">.</span><span class="na">USER_CODE_EXECUTED</span><span class="o">,</span> <span class="n">CommandState</span><span class="o">.</span><span class="na">TERMINAL</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">handleCommandEnd</span><span class="o">(</span><span class="n">_cmd</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">//user code did run</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//mark the command as CANCELLED and store the latency (in addition to standard cleanup)</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Action0</span> <span class="n">unsubscribeCommandCleanup</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Action0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">_cmd</span><span class="o">.</span><span class="na">commandState</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">CommandState</span><span class="o">.</span><span class="na">OBSERVABLE_CHAIN_CREATED</span><span class="o">,</span> <span class="n">CommandState</span><span class="o">.</span><span class="na">UNSUBSCRIBED</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">_cmd</span><span class="o">.</span><span class="na">eventNotifier</span><span class="o">.</span><span class="na">markEvent</span><span class="o">(</span><span class="n">HystrixEventType</span><span class="o">.</span><span class="na">CANCELLED</span><span class="o">,</span> <span class="n">_cmd</span><span class="o">.</span><span class="na">commandKey</span><span class="o">);</span>
</span><span class='line'>                <span class="n">_cmd</span><span class="o">.</span><span class="na">executionResultAtTimeOfCancellation</span> <span class="o">=</span> <span class="n">_cmd</span><span class="o">.</span><span class="na">executionResult</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">addEvent</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">_cmd</span><span class="o">.</span><span class="na">commandStartTimestamp</span><span class="o">),</span> <span class="n">HystrixEventType</span><span class="o">.</span><span class="na">CANCELLED</span><span class="o">);</span>
</span><span class='line'>                <span class="n">handleCommandEnd</span><span class="o">(</span><span class="n">_cmd</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span> <span class="c1">//user code never ran</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">_cmd</span><span class="o">.</span><span class="na">commandState</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">CommandState</span><span class="o">.</span><span class="na">USER_CODE_EXECUTED</span><span class="o">,</span> <span class="n">CommandState</span><span class="o">.</span><span class="na">UNSUBSCRIBED</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">_cmd</span><span class="o">.</span><span class="na">eventNotifier</span><span class="o">.</span><span class="na">markEvent</span><span class="o">(</span><span class="n">HystrixEventType</span><span class="o">.</span><span class="na">CANCELLED</span><span class="o">,</span> <span class="n">_cmd</span><span class="o">.</span><span class="na">commandKey</span><span class="o">);</span>
</span><span class='line'>                <span class="n">_cmd</span><span class="o">.</span><span class="na">executionResultAtTimeOfCancellation</span> <span class="o">=</span> <span class="n">_cmd</span><span class="o">.</span><span class="na">executionResult</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">addEvent</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">_cmd</span><span class="o">.</span><span class="na">commandStartTimestamp</span><span class="o">),</span> <span class="n">HystrixEventType</span><span class="o">.</span><span class="na">CANCELLED</span><span class="o">);</span>
</span><span class='line'>                <span class="n">handleCommandEnd</span><span class="o">(</span><span class="n">_cmd</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">//user code did run</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Func0</span><span class="o">&lt;</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;&gt;</span> <span class="n">applyHystrixSemantics</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Func0</span><span class="o">&lt;</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">applyHystrixSemantics</span><span class="o">(</span><span class="n">_cmd</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Func1</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="n">wrapWithAllOnNextHooks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Func1</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">R</span> <span class="nf">call</span><span class="o">(</span><span class="n">R</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">R</span> <span class="n">afterFirstApplication</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">afterFirstApplication</span> <span class="o">=</span> <span class="n">executionHook</span><span class="o">.</span><span class="na">onComplete</span><span class="o">(</span><span class="n">_cmd</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">hookEx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Error calling HystrixCommandExecutionHook.onComplete&quot;</span><span class="o">,</span> <span class="n">hookEx</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">executionHook</span><span class="o">.</span><span class="na">onEmit</span><span class="o">(</span><span class="n">_cmd</span><span class="o">,</span> <span class="n">afterFirstApplication</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">hookEx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Error calling HystrixCommandExecutionHook.onEmit&quot;</span><span class="o">,</span> <span class="n">hookEx</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">afterFirstApplication</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Action0</span> <span class="n">fireOnCompletedHook</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Action0</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">executionHook</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">_cmd</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">hookEx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Error calling HystrixCommandExecutionHook.onSuccess&quot;</span><span class="o">,</span> <span class="n">hookEx</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Observable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">hystrixObservable</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">Observable</span><span class="o">.</span><span class="na">defer</span><span class="o">(</span><span class="n">applyHystrixSemantics</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">wrapWithAllOnNextHooks</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">Observable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">afterCache</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// put in cache</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">requestCacheEnabled</span> <span class="o">&amp;&amp;</span> <span class="n">cacheKey</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// wrap it for caching</span>
</span><span class='line'>        <span class="n">HystrixCachedObservable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">toCache</span> <span class="o">=</span> <span class="n">HystrixCachedObservable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">hystrixObservable</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HystrixCommandResponseFromCache</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">fromCache</span> <span class="o">=</span> <span class="o">(</span><span class="n">HystrixCommandResponseFromCache</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;)</span> <span class="n">requestCache</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">cacheKey</span><span class="o">,</span> <span class="n">toCache</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">fromCache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// another thread beat us so we&#39;ll use the cached value instead</span>
</span><span class='line'>            <span class="n">toCache</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isResponseFromCache</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">handleRequestCacheHitAndEmitValues</span><span class="o">(</span><span class="n">fromCache</span><span class="o">,</span> <span class="n">_cmd</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// we just created an ObservableCommand so we cast and return it</span>
</span><span class='line'>            <span class="n">afterCache</span> <span class="o">=</span> <span class="n">toCache</span><span class="o">.</span><span class="na">toObservable</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">afterCache</span> <span class="o">=</span> <span class="n">hystrixObservable</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">afterCache</span>
</span><span class='line'>            <span class="o">.</span><span class="na">doOnTerminate</span><span class="o">(</span><span class="n">terminateCommandCleanup</span><span class="o">)</span>     <span class="c1">// perform cleanup once (either on normal terminal state (this line), or unsubscribe (next line))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">doOnUnsubscribe</span><span class="o">(</span><span class="n">unsubscribeCommandCleanup</span><span class="o">)</span> <span class="c1">// perform cleanup once</span>
</span><span class='line'>            <span class="o">.</span><span class="na">doOnCompleted</span><span class="o">(</span><span class="n">fireOnCompletedHook</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>RxJava中的Observable和Subscriber</h1>

<h2>参考资料</h2>

<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/">https://mcxiaoke.gitbooks.io/rxdocs/content/</a><br/>
<a href="https://gank.io/post/560e15be2dca930e00da1083#toc_10">https://gank.io/post/560e15be2dca930e00da1083#toc_10</a><br/>
<a href="http://www.jianshu.com/p/c83996149f5b">http://www.jianshu.com/p/c83996149f5b</a><br/>
RxJava是 <a href="http://reactivex.io/">ReactiveX</a> 在JVM上的一个实现，ReactiveX使用Observable序列组合异步和基于事件的程序。更多关于ReactiveX的资料，可以查看 <a href="https://github.com/mcxiaoke/RxDocs/blob/master/docs/Intro.md">ReactiveX 介绍</a> 页面。</p>

<h2>Observable</h2>

<p>在ReactiveX中，一个观察者(Observer)订阅一个可观察对象(Observable)。观察者对Observable发射的数据或数据序列作出响应。这种模式可以极大地简化并发操作，因为它创建了一个处于待命状态的观察者哨兵，在未来某个时刻响应Observable的通知，不需要阻塞等待Observable发射数据。<br/>
在Hystrix主要使用到了Funx类、Actionx类、defer()方法、map()方法、以及一列的do方法。</p>

<h3>Funx类和ActionX类</h3>

<p>Funx类和Actionx类用于包装有x参数方法的类。Funx类和Actionx类的区别在于Actionx类封装的方法是没有返回值的。Funx类封装的是有返回值的方法。</p>

<h3>defer()方法</h3>

<p>Defer操作符会一直等待直到有观察者订阅它，然后它使用Observable工厂方法生成一个Observable。它对每个观察者都这样做，因此尽管每个订阅者都以为自己订阅的是同一个Observable，事实上每个订阅者获取的是它们自己的单独的数据序列。<br/>
<img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/defer.c.png" alt="" /><br/>
在Hystrix中，将一次远程调用封装为一个Observable，并使用defer()方法，在它被订阅的时候启动调用。</p>

<h3>map()方法</h3>

<p>Map操作符对原始Observable发射的每一项数据应用一个你选择的函数，然后返回一个发射这些结果的Observable。<br/>
<img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/map.png" alt="" /><br/>
在Hystrix中，HystrixCommandExecutionHook方法中的onEmit()方法所封装的发挥处理方法将通过map()方法进行调用。</p>

<h3>do()方法</h3>

<p>RxJava通过一系列的do方法注册回调。当Observable的某个事件发生时，Rx会在与Observable链关联的正常通知集合中调用它。Rx实现了多种操作符用于达到这个目的。<br/>
<img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/do.c.png" alt="" /><br/>
在Hystrix中，主要用到了</p>

<ol>
<li>doOnTerminate</li>
<li>doOnUnsubscribe</li>
<li>doOnCompleted</li>
</ol>


<p>用于进行调用环境的清理，调用监控数据的收集。</p>

<h2>Subscriber</h2>

<p>Subscribe方法用于将观察者连接到Observable。在Hystrix中，使用一个BlockingObservable中的toFuture()方法，注册一个了Subscribe用户启动依赖服务的调用，并将调用结果放置在Future中供Command对象获取。</p>

<h1>工作原理</h1>

<p>通过前面的描述，我们可以发现Hystrix的整个工作流程中的第2步骤到第9步骤都是通过RxJava来实现的。<br/>
首先进入到toObservable方法中，检查是否存在缓存，如果存在缓存，则返回结果。<br/>
如果没有，则通过applyHystrixSemantics实例化一个Observable对象，在call方法中进行4、5、6、7、8步骤的执行。<br/>
最后将环境清理、监控数据收集的方法通过do方法加载到返回的Observable对象上，通过BlockingObservable注册一个Subscribe启动这次调用，并返回一个Future。</p>

<h2>通路熔断器</h2>

<p><img src="https://raw.githubusercontent.com/wiki/Netflix/Hystrix/images/circuit-breaker-1280.png" alt="" /><br/>
HystrixCircuitBreaker对象会根据设定的一些值，判断是否开启熔断机制。</p>

<ol>
<li>通路在当前时间窗口的调用量超过预设上限时（HystrixCommandProperties.circuitBreakerRequestVolumeThreshold()）。</li>
<li>通路在当前时间窗口的调用失败率超过预设上限时（HystrixCommandProperties.circuitBreakerErrorThresholdPercentage()）。</li>
<li>熔断机制生效。</li>
<li>熔断机制生效时，所有调用走一个短通路，即预设的fallback。</li>
<li>当下一个窗口（HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds()）来临时，所有统计数据从0开始，熔断失效，开启新一轮熔断判定。</li>
</ol>


<h2>隔离机制</h2>

<p><img src="https://github.com/Netflix/Hystrix/wiki/images/soa-5-isolation-focused-640.png" alt="" /><br/>
Hystrix为了将各个调用隔离开来，使用了threadPool和Semaphores两种方式，执行调用的线程。具体的代码可以看一下AbstractCommand中的applyHystrixSemantics方法。</p>

<h2>调用合并</h2>

<p><img src="https://github.com/Netflix/Hystrix/wiki/images/collapser-640.png" alt="" /><br/>
Hystrix中提供了一个HystrixCollapser的抽象类用于调用合并。用户在使用的时候，需要实例化一个继承自HystrixCollapser的对象，在对象中设置指定的参数组合而成的key。当同样的请求，即指定的参数一致的请求，请求过来，若没有缓存的结果，将构建一个HystrixCommand对象来执行这次调用。并将调用结果缓存起来，下次有同样的key的调用，直接返回调用结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊聊并发-锁]]></title>
    <link href="http://wangweiqing.github.io/blog/2016/05/09/liao-liao-bing-fa-suo/"/>
    <updated>2016-05-09T21:48:19+08:00</updated>
    <id>http://wangweiqing.github.io/blog/2016/05/09/liao-liao-bing-fa-suo</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>互联网业务中难免存在一些需要并发的业务。在开发并行业务的代码的时候，重中之重是保证线程的安全。为了保证线程的安全，我们尽可能的增强任务代码的独立性。但是在一些特殊的场景中还是需要为多个并行线程提供共享变量，为了保证每个线程的线程安全，java为我们提供了一系列的工具来满足我们的需要。<br/>
java在早期提供了synchronized关键字作为一种手段来保证线程安全。但是开发人员在实际的使用中发现synchronized机制下进行加锁会极大的影响到性能。<br/>
所以在1.5版本中，新增了一个基于AQS(AbstractQueuedSynchronizer)来实现的一系列的锁。
在1.6版本中，java又对原有的synchronized锁进行了优化，使其性能有了一定的提升。<br/>
下面就讲对两种锁的机制分别进行一一介绍。</p>

<h1>Synchronized</h1>

<p>synchronized实际上应该算是一种java内置锁，大部分实现依赖jvm虚拟机的实现。所以在使用上，synchronized对java语言开发者来说更为友好。大部分的开发者不用关心synchronized的内部实现是怎样的。只需要按照java语法规范对临界区进行加锁即可。<br/>
在1.6版本之前，synchronized被称为重量级锁，其实现机制是这样的。<br/>
JVM会为每一个被synchronized关联为锁的对象(Object)关联一个对象监视器(Monitor)，monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处， JVM要保证每个monitorenter必须有对应的monitorexit与之配对。<br/>
而每个monitor对象都包含了如下几个部分，cxq(Contention List)，EntryList，Wait Set。</p>

<ol>
<li>cxq(Contention List) FILO竞争队列，应对多线程竞争锁的时候，使用CAS操作替换队列头部。</li>
<li>EntryList cxq中的合适线程可以被放入EntryList，Wait Set中的线程被notify()之后，也会放入EntryList中，准备竞争锁。</li>
<li>Wait Set 线程被wait()后，将会被放入Wait Set中。</li>
</ol>


<p><img src="https://github.com/wangweiqing/wangweiqing.github.io/raw/master/images/lock.png" alt="" />
竞争锁的线程都会先通过互斥同步或CAS操作进入cxq，队首的对象会进入到EntryList中，进行tryLock操作。成功则获得当前锁。如果失败，则被调用wait()阻塞，进入到Wait Set中。当进入Wait Set中的线程被notify()后，线程将进入到EntryList中。如果是被notifyAll()线程将重新通过互斥同步或CAS操作进入到cxq中。<br/>
通过上述的描述，大家可以发现java实现的内置锁在多线程并发过程中会涉及到大量的互斥同步或CAS操作。
当一个线程在进入一段临界区的时候，实际场景是没有线程与该线程进行竞争，这个时候进行互斥同步或CAS操作也是浪费的。<br/>
所以这个时期的synchronized被称为重量级锁，在java1.6中通过增加偏向锁、轻量级锁来解决上述的问题。</p>

<h2>轻量级锁</h2>

<p>在HotSpot虚拟机里，每个对象的对象头(Object Header)分为两部分信息，一部分是存储对象自身的运行时数据，如哈希码(HashCode)、GC分代年龄(Generational GC Age)等，这部分数据被称为Mark Word，长度为32bit（32位虚拟机）或64bit（64位虚拟机）。另一部分用于存储只想方法区对象类型数据的指针。如果是数组对象，还会有一个额外的部分用于存储数组长度。</p>

<table>
<thead>
<tr>
<th> </th>
<th style="text-align:center;">25bit</th>
<th style="text-align:center;">4bit</th>
<th style="text-align:center;">1bit(是否为偏向锁)</th>
<th style="text-align:center;">2bit(锁标志位)</th>
</tr>
</thead>
<tbody>
<tr>
<td>无锁状态</td>
<td style="text-align:center;">对象HashCode</td>
<td style="text-align:center;">对象分代年龄</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">01</td>
</tr>
</tbody>
</table>


<p>当有锁状态时</p>

<table>
<thead>
<tr>
<th style="text-align:center;">锁状态</th>
<th style="text-align:center;">25bit</th>
<th style="text-align:center;">4bit</th>
<th style="text-align:center;">1bit</th>
<th style="text-align:center;">2bit(锁标志位)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">轻量级锁</td>
<td style="text-align:center;">指向栈中的锁指针</td>
<td style="text-align:center;">指向栈中的锁指针</td>
<td style="text-align:center;">指向栈中的锁指针</td>
<td style="text-align:center;">00</td>
</tr>
<tr>
<td style="text-align:center;">重量级锁</td>
<td style="text-align:center;">指向互斥量（重量级锁）指针</td>
<td style="text-align:center;">指向互斥量（重量级锁）指针</td>
<td style="text-align:center;">指向互斥量（重量级锁）指针</td>
<td style="text-align:center;">10</td>
</tr>
<tr>
<td style="text-align:center;">偏向锁</td>
<td style="text-align:center;">线程ID+epoch（2bit）</td>
<td style="text-align:center;">对象分代年龄</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">01</td>
</tr>
</tbody>
</table>


<p>轻量级锁的设计主要是为了解决在实际并发场景中，并没有锁的竞争情况下，对锁对象加上一个轻量级的锁。规避掉重量级锁的大量的互斥同步或CAS操作。<br/>
当对象是无锁的状态下，在当前线程的栈帧中建立一个锁记录(Lock Record)空间用于储存当前对象的Mark Word(Displaced Mark Word)，在对象头中通过CAS操作增加一个指向栈中的锁记录指针。操作成功了，则将对象的锁标志位由01变成00。这样涉及到原来重量级锁中的一些操作就被规避掉，线程就获得了锁。<br/>
当对Mark Word的CAS更新失败的时候，检查指向的锁空间是否为当前线程的锁空间。如果是当前线程的锁空间，则是一个重入；如果不是，则这个锁对象已经被其他线程抢占了，这个时候轻量级锁就会膨胀，膨胀为一个重量级锁。就会进行上述的那些重量级锁的操作。<br/>
轻量级锁的解锁过程也是通过CAS操作来实现的。将存储在Lock Record中的Displaced Mark Word取回，和原有的头的Mark Word做替换。如果替换成功，则同步过程完成。如果失败，说明其他线程尝试过获取该锁。执行重量级锁解锁。</p>

<h2>偏向锁</h2>

<p>偏向锁的设计主要为了解决在实际的并发场景中，在无竞争的状态下，规避掉同步的操作。<br/>
实现原理同样很简单，当线程执行到加锁临界区时，对锁进行CAS操作，在Mark Word中写入线程ID，如果CAS操作成功，以后线程每次进入到临界区时，都不需要进行任何同步操作。<br/>
但是如果说另一个线程对偏向锁进行竞争的时候，发现锁的状态为偏向锁，则会执行撤销偏向锁的操作。当前持锁线程在执行到可退出同步的代码块进行解锁操作，同时将锁升级为轻量级锁，如果另一个线程仍在竞争锁，这个时候锁就会由轻量级锁膨胀为重量级锁。</p>

<h2>小结</h2>

<p>1.6版本对于synchronized的优化主要是基于有同步无竞争的状态进行优化的，减少其中的同步操作，来提升效率，但是在实际的应用场景中，如果一个锁频繁的被数个线程锁竞争，这种优化锁带来的锁膨胀问题反而成为了性能的瓶颈。</p>

<h1>The j.u.c Synchronizer Framework中的AQS</h1>

<p>AQS被称为Synchronizer，一般包含了两种方法一种是acquire（获得锁），一种是release（释放锁）。
Synchronizer需要实现以下3点<br/>
1. 同步状态的原子性管理<br/>
2. 线程的阻塞与解除阻塞管理<br/>
3. 队列的管理</p>

<p>AQS的基本实现的思路也是提供一个队列（CHL）队首元素占有锁。每个线程在无法直接获得锁的情况下，都会被包装成一个Node节点加入到队列中。当当前队列为空且新进入的线程无法获得锁的时候，通过addWaiter()方法，将线程加入到队列当中。线程会在队列中自旋，不停的去获取锁，直至持有锁，持有锁后会将自己替换成队首。当当前队列不为空的时候，新进入线程会被添加至队尾，使用LockSupport的park方法将线程阻塞。<br/>
当线程释放锁的时候，会调用release方法。在release方法中将锁释放掉。同时将唤醒当前队列中的第二个Node，让该Node中的线程unparked，进入自旋中，不停的获取锁。<br/>
Node节点在设计的时候，除了最基本的双向链表之外，也为每个节点增加了一个状态位用以表示Node节点线程现有的状态，在实际操作的过程中，状态位的状态将会根据期望的状态进行CAS操作来更新。具体的状态如下：<br/>
1. CANCELLED，值为1，表示当前的线程被取消；<br/>
2. SIGNAL，值为-1，表示当前节点的后继节点包含的线程需要运行，也就是unpark；<br/>
3. CONDITION，值为-2，表示当前节点在等待condition，也就是在condition队列中；<br/>
4. PROPAGATE，值为-3，表示当前场景下后续的acquireShared能够得以执行；<br/>
5. 值为0，表示当前节点在sync队列中，等待着获取锁。</p>

<p>综上所述，我们可以看到，Synchronizer通过对于节点状态的进行CAS操作来保证同步状态的原子性管理。通过CHL队列和LockSupport将对没有或得锁的线程阻塞，需要唤醒的线程接触阻塞。通过对CHL队列的头尾进行CAS操作，来进行队列的管理。<br/>
<img src="https://github.com/wangweiqing/wangweiqing.github.io/raw/master/images/chl_lock.png" alt="" /></p>

<h2>ConditionObject</h2>

<p>为了实现类似于Synchronized关键字实现机制中的WaitSet中线程被notify()和notifyAll()唤醒的功能，以及共享锁的功能。AQS中增加了一个与Sync队列一样结构的ConditionObject(条件队列)。<br/>
如果使用者需要在实际的使用场景中增加WaitSet的功能，可以直接将conditionObject对象new出来，当线程在某些特定条件下，如限制了sync队列的长度，队列满了之后，对新的线程调用await()方法，将节点放入conditionObject中。等到一定条件满足后，使用notify()或notifyAll()，将线队列中的线程出队，重新进入sync队列中竞争锁。</p>

<h2>小结</h2>

<p>通过上述的分析，我们可以发现，AQS在无线程竞争锁的条件下，通过一次CAS操作来获得锁，当多个线程竞争锁的时候，没有竞争到锁的线程，通过两步CAS操作（设定队首和对尾），建立一个Sync队列，在获得锁后进行一次CAS操作。以后的线程入队，则通过1次CAS操作变更队尾即可。</p>

<h1>总结</h1>

<p>虽然java在1.5和1.6对synchronized关键字的具体实现机制进行了升级，但是仍然主要针对多线程竞争锁的发生概率极低的条件进行的假设。当真正的业务场景中，出现了大量的线程竞争锁的场景出现。就会带来锁膨胀的问题。从而导致性能下降。<br/>
而AQS在没有多线程竞争锁的场景下，表现尚可，多线程竞争锁的状态下，性能要比synchronized的性能略胜一筹。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ElasticSearch初探——集群环境搭建]]></title>
    <link href="http://wangweiqing.github.io/blog/2015/12/13/elasticsearchchu-tan-ji-qun-huan-jing-da-jian/"/>
    <updated>2015-12-13T01:26:25+08:00</updated>
    <id>http://wangweiqing.github.io/blog/2015/12/13/elasticsearchchu-tan-ji-qun-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>加入新公司之后分到的第一个项目涉及到对商品进行筛选的需求。当时直接采用了数据库建立索引进行商品的筛选。不幸被Leader狂喷一顿。后来窝窝团的星游哥及时加入了我们的团队，使用了ElasticSearch重构了这个功能。这是我人生中第一次接触到ElasticSearch。<br/>
目前业内经常提及到的日志分析系统很多都是使用ELK进行搭建，也就是使用ElasticSearch、Logstash和Kibana作为基础的服务组件，进行二次开发。除此之外，ElasticSearch也在电商领域有一些应用。比如说窝窝团的C端商品搜索即使用的ElasticSearch。现在的公司应为技术传承问题，之前的java开发搜索引擎的选型为solr，所以在ElasticSearch上并没有太多的实战案例。但是考虑到Solr和ElasticSearch的对比，在一些新的项目中也开始逐渐尝试使用ElasticSearch。<br/>
由于我们现有的开发任务的需要，所以在业务时间对ElasticSearch进行了一些学习。打算写一个学习ElasticSearch的文章，供其他初学者使用。<br/>
本系列讨论的ElasticSearch版本为2.1，其他版本的问题，可以自行联系星游哥哦～</p>

<h1>OS环境准备</h1>

<p>长时间使用RHEL系列的服务器OS，所以就不假思索的选择了CentOS 6.5。当然这也跟所处的公司有关，比如说我们公司线上服务器用的就是CentOS。<br/>
准备了2台虚拟机作为2个node。每台机器分配了4G的内存。</p>

<h2>java环境</h2>

<p>ElasticSearch最底层实际上是一个个Luence，所以需要java环境。现在正好赶上全司Java端升级java8的趋势，所以在两台虚拟机上均安装了java8。</p>

<h2>关闭防火墙</h2>

<p>考虑到结点之间需要大量的网络通讯，防止iptables捣乱，所以在机器安装好之后就将两台机器的防火墙关闭。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service iptables stop  
</span><span class='line'>chkconfig iptables off  </span></code></pre></td></tr></table></div></figure>


<h1>ElasticSearch+Kibana安装</h1>

<p>从官网上下载最新的ElasticSearch安装包到本地，然后解压到指定的目录。考虑到ElasticSearch的master选举机制，本着先将环境搭建起来的原则，所以这次采用了单master的机制。将Kibana解压到master机器上。<br/>
按照官网的要求，在每个ElasticSearch上安装了license和marvel-agent。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/plugin install license  
</span><span class='line'>bin/plugin install marvel-agent  </span></code></pre></td></tr></table></div></figure>


<p>在Kibana中安装Marvel。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/kibana plugin --install elasticsearch/marvel/latest  </span></code></pre></td></tr></table></div></figure>


<p>这样我们就可以在Kibana启动后，通过一个网页看到ElasticSearch的集群情况。</p>

<h1>ElasticSearch+Kibana配置文件修改</h1>

<p>ElasticSearch master机配置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cluster.name: wwq-es//cluster的名称，当当前网络中存在多个ElasticSearch的cluster的时候，使用cluster的名称作为区分。  
</span><span class='line'>node.name: es-1//当前结点的名称。
</span><span class='line'>network.host: 192.168.253.133//当前节点的IP。
</span><span class='line'>discovery.zen.ping.multicast.enabled: false//不允许使用multicast的发现方式，官方就是不推荐，我也不知道。
</span><span class='line'>discovery.zen.ping.unicast.hosts: ["192.168.253.133:9300","192.168.253.134:9300"]//集群节点发现列表
</span><span class='line'>discovery.zen.minimum_master_nodes: 1</span></code></pre></td></tr></table></div></figure>


<p>这里主要要说一下节点IP的问题。ElasticSearch里将IP区分为bind_host和publish_host，其中关于publish_host的原文说明是<code>The network.publish_host setting allows to control the host the node will publish itself within the cluster so other nodes will be able to connect to it.</code>起初只配置了publish_host但是发现两个节点还是无法通讯。所以将network.host给改成了本机的ip了。相应的也要变更Kibana的配置文件了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>elasticsearch.url: "http://192.168.253.133:9200"</span></code></pre></td></tr></table></div></figure>


<p>ElasticSearch slave机配置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node.data: true
</span><span class='line'>node.master: false</span></code></pre></td></tr></table></div></figure>


<p>与master机器的唯一差异就是设置该机器不能被选举成为master。</p>
]]></content>
  </entry>
  
</feed>
